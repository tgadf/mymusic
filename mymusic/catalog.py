""" Command line code to scan my music archive """__all__ = ["MyMusicCatalog"]from utils import FileIO, header, DirInfo, Timestatfrom .primedir import PrimeDirfrom .params import MyMusicParamsfrom .artistcatalog import MyMusicArtistCatalog################################################################################ My Artist Album Type###############################################################################class MyMusicCatalog:    def __init__(self, **kwargs):        self.params = MyMusicParams(**kwargs)        self.verbose = kwargs.get('verbose', False)                header("MyMusicCatalog", width=125)            ###########################################################################    # Find Artist Directories    ###########################################################################    def findArtistDirs(self, **kwargs):        test = kwargs.get('test', False)                artistDirs = {}        pd = PrimeDir()                ts = Timestat("Finding Artist Directories", verbose=self.verbose, ind=2)        matchedDir = self.params.getMatchedDir()        assert matchedDir.exists(), f"MatchedDir [{matchedDir}] is not available"                for primeDir in pd.getPrimeDirs():            matchedPrimeDir = matchedDir.joinDir(primeDir)            assert matchedPrimeDir.exists(), f"MatchedPrimeDir [{matchedDir}] is not available"            artistDirs[matchedPrimeDir] = matchedPrimeDir.getDirs()        ts.stop()        nArtists = sum([len(x) for x in artistDirs.values()])                io = FileIO()        savefile = self.params.getFile("ArtistDirs")                print(f"  Found {nArtists} Artist Directories. ", end="")        if test is False:            print(" Saving ... ", end="")            io.save(idata=artistDirs, ifile=savefile)        print("Done")            ###########################################################################    # Find Artist Directory Contents    ###########################################################################    def findArtistDirContents(self, **kwargs):        test = kwargs.get('test', False)        force = kwargs.get('force', False)                if force is True:            self.findArtistDirs()        io = FileIO()        savefile = self.params.getFile("ArtistDirs")        artistDirs = io.get(savefile)        assert isinstance(artistDirs, dict), f"[{savefile}] is corrupt"                ts = Timestat("Finding Artist Directory Contents", verbose=self.verbose, ind=2)        nArtists = sum([len(x) for x in artistDirs.values()])        n = 0        artistDirContents = {}        for primeDir, primeDirArtistDirs in artistDirs.items():            artistDirContents[primeDir] = {}            for artistDir in primeDirArtistDirs:                assert isinstance(artistDir, DirInfo), f"artistDir [{artistDir}] is not a DirInfo"                mymac = MyMusicArtistCatalog(artistDir)                mymac.find()                artistDirContents[primeDir][artistDir] = mymac.getContents()                n += 1                if test is True:                    break            ts.update(n=n + 1, N=nArtists)        ts.stop()                savefile = self.params.getFile("ArtistDirContents")                print(f"  Found {nArtists} Artist Directories. ", end="")        if test is False or True:            print(" Saving ... ", end="")            io.save(idata=artistDirContents, ifile=savefile)        print("Done")            