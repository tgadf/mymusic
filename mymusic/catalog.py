""" Command line code to scan my music archive """__all__ = ["MyMusicCatalog"]from myutils import FileIO, header, DirInfo, Timestatfrom .primedir import PrimeDirfrom .params import MyMusicParamsfrom .artistcatalog import MyMusicArtistCatalog################################################################################ My Artist Album Type###############################################################################class MyMusicCatalog:    def __init__(self, **kwargs):        self.params = MyMusicParams(**kwargs)        self.verbose = kwargs.get('verbose', False)                header("MyMusicCatalog", width=125)            ###########################################################################    # Get Prime Directory Names    ###########################################################################    def get_matched_prime_dirs(self, check_exists: bool = True) -> 'dict':        matched_dir = self.params.get_matched_dir()                if check_exists is True:            assert matched_dir.exists(), f"MatchedDir [{matched_dir}] is not available"                pd = PrimeDir()        retval = {prime_dir: matched_dir.joinDir(prime_dir) for prime_dir in pd.get_prime_dirs()}                if check_exists is True:            for prime_dir, matched_prime_dir in retval.items():                assert matched_prime_dir.exists(), f"MatchedPrimeDir [{matched_prime_dir}] is not available"                        return retval            ###########################################################################    # Find Artist Directories Under Prime Directories    ###########################################################################    def find_artist_dirs(self, **kwargs):        test = kwargs.get('test', False)        check_exists = not test                artist_dirs = {}                ts = Timestat("Finding Artist Directories", verbose=self.verbose, ind=2)        artist_dirs = self.get_matched_prime_dirs(check_exists)        for prime_dir, matched_prime_dir in artist_dirs.items():            artist_dirs[matched_prime_dir] = matched_prime_dir.getDirs()        ts.stop()        nArtists = sum([len(x) for x in artist_dirs.values()])                io = FileIO()        save_file = self.params.getFile("Dirs")                print(f"  Found {nArtists} Artist Directories. ", end="")        if test is False:            print(" Saving ... ", end="")            io.save(idata=artist_dirs, ifile=save_file)        else:            print(f" Not saving data to {save_file} ... ")        print("Done")            ###########################################################################    # Find Artist Directory Contents    ###########################################################################    def findArtistDirContents(self, **kwargs):        test = kwargs.get('test', False)        force = kwargs.get('force', False)                if force is True:            self.findArtistDirs()        io = FileIO()        savefile = self.params.getFile("ArtistDirs")        artistDirs = io.get(savefile)        assert isinstance(artistDirs, dict), f"[{savefile}] is corrupt"                ts = Timestat("Finding Artist Directory Contents", verbose=self.verbose, ind=2)        nArtists = sum([len(x) for x in artistDirs.values()])        n = 0        artistDirContents = {}        for primeDir, primeDirArtistDirs in artistDirs.items():            artistDirContents[primeDir] = {}            for artistDir in primeDirArtistDirs:                assert isinstance(artistDir, DirInfo), f"artistDir [{artistDir}] is not a DirInfo"                mymac = MyMusicArtistCatalog(artistDir)                mymac.find()                artistDirContents[primeDir][artistDir] = mymac.getContents()                n += 1                if test is True:                    break            ts.update(n=n + 1, N=nArtists)        ts.stop()                savefile = self.params.getFile("ArtistDirContents")                print(f"  Found {nArtists} Artist Directories. ", end="")        if test is False or True:            print(" Saving ... ", end="")            io.save(idata=artistDirContents, ifile=savefile)        print("Done")            