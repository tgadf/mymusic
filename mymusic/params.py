""" Master Container Class For Deezer DB """__all__ = ["MyMusicParams"]from myutils import DirInfofrom sys import prefixclass MyMusicParams:    def __repr__(self):        return "MyMusicParams()"        def __init__(self, **kwargs):        mkDirs = kwargs.get('mkDirs', False)        verbose = kwargs.get('verbose', False)                #######################################################################        # Persist Params        #######################################################################        projectName = "mymusic"                #######################################################################        # Basic Path Params        #######################################################################        self.matched_path = DirInfo("/Volumes/Piggy/Music/Matched")                paths = {}        paths["Prefix"] = DirInfo(prefix)        paths["MyMusic"] = paths["Prefix"].joinDir(projectName)                if mkDirs is True:            for key, keyPath in paths.items():                keyPath.mkDir()                    self.paths = paths                #######################################################################        # Basic Files        #######################################################################        files = {}        files["Dirs"] = paths["MyMusic"].joinFile("artistDirs.p")        files["Contents"] = paths["MyMusic"].joinFile("artistDirContents.p")                self.files = files                if verbose is True:            print(self.__repr__())            print(f"{'Music Dir': <13} | {self.matched_path}")            print("Env Paths:")            for key, path in paths.items():                print(f"   {key: <10} | {path}")            print("Env Files:")            for key, file in files.items():                print(f"   {key: <10} | {file}")    ###########################################################################    # Music Directoriesr    ###########################################################################    def get_prefix_dir(self):        return self.paths["Prefix"]            def get_mymusic_dir(self):        return self.paths["MyMusic"]            def get_matched_dir(self):        return self.matched_path        def get_file(self, key):        assert key in self.files.keys(), f"File key [{key}] is not available"        return self.files[key]