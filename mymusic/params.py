""" Master Container Class For Deezer DB """__all__ = ["MyMusicParams"]from utils import DirInfofrom sys import prefixclass MyMusicParams:    def __repr__(self):        return "MyMusicParams()"        def __init__(self, **kwargs):        mkDirs = kwargs.get('mkDirs', False)                #######################################################################        # Persist Params        #######################################################################        projectName = "mymusic"                #######################################################################        # Basic Path Params        #######################################################################        self.matchedPath = "/Volumes/Piggy/Music/Matched"                paths = {}        paths["Prefix"] = DirInfo(prefix)        paths["MyMusic"] = paths["Prefix"].joinDir(projectName)                if mkDirs is True:            for key, keyPath in paths.items():                keyPath.mkDir()                    self.paths = paths                #######################################################################        # Basic Files        #######################################################################        files = {}        files["ArtistDirs"] = paths["MyMusic"].joinFile("artistDirs.p")        files["ArtistDirContents"] = paths["MyMusic"].joinFile("artistDirContents.p")                self.files = files    ###########################################################################    # Music Directories    ###########################################################################    def getPrefixDir(self):        return self.paths["Prefix"]            def getMyMusicDir(self):        return self.paths["MyMusic"]            def getMatchedDir(self):        return DirInfo(self.matchedPath)        def getFile(self, key):        assert key in self.files.keys(), f"File key [{key}] is not available"        return self.files[key]